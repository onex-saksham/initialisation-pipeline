node {
    echo "üîê Starting isolated Vault secret fetch test (scripted pipeline)..."

    // Define environment-like variables
    def VAULT_CREDENTIAL_ID = 'vault-approle-credential'
    def JENKINS_KEY_FILE = 'jenkins_key_from_vault.pem'

    try {
        // Vault config and secret definition
        def vaultConfig = [
            vaultCredentialId: VAULT_CREDENTIAL_ID
        ]

        def secretsToFetch = [
            [
                path: 'secret/initialization/jenkins/ssh_key',
                engineVersion: 2,
                secretValues: [
                    [envVar: 'SSH_PRIVATE_KEY_CONTENT', vaultKey: 'ssh-key']
                ]
            ]
        ]

        // Fetch secret using withVault
        withVault([configuration: vaultConfig, vaultSecrets: secretsToFetch]) {
            echo "‚úÖ Successfully retrieved secret from Vault."

            // Write key to file to verify it's accessible
            writeFile file: JENKINS_KEY_FILE, text: env.SSH_PRIVATE_KEY_CONTENT
            sh "chmod 600 ${JENKINS_KEY_FILE}"

            // Read and validate the file content
            def keyContent = readFile(JENKINS_KEY_FILE).trim()
            if (!keyContent || !keyContent.startsWith('-----BEGIN')) {
                error "‚ùå Secret content looks invalid or missing!"
            } else {
                echo "‚úÖ SSH key content fetched and validated (${keyContent.take(40)}...)"
            }
        }

        echo "üéâ Vault integration test completed successfully."
    }
    catch (err) {
        echo "‚ùå Vault fetch failed: ${err}"
        currentBuild.result = 'FAILURE'
        throw err
    }
}
